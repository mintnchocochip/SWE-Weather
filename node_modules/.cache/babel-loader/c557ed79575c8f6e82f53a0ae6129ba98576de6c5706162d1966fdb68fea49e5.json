{"ast":null,"code":"// Weather API service\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nclass WeatherAPI {\n  // Search for weather data by location\n  static async searchWeather(location) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/weather/search`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          location\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Weather API error:', error);\n      // Fallback to mock data for development\n      return this.getMockWeatherData(location);\n    }\n  }\n\n  // Get AI recommendations from backend\n  static async getAIRecommendations(weatherData, location) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/ai/recommendations`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          weather: weatherData,\n          location: location\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('AI API error:', error);\n      // Fallback to mock recommendations\n      return this.getMockRecommendations(weatherData);\n    }\n  }\n\n  // Mock weather data for development/fallback\n  static getMockWeatherData(location) {\n    const mockData = {\n      'Chennai': {\n        location: 'Chennai',\n        condition: 'Clear',\n        temperature: 22,\n        humidity: 50,\n        feelsLike: 24,\n        wind: 5,\n        icon: '‚òÄÔ∏è',\n        country: 'India',\n        coordinates: {\n          lat: 13.0827,\n          lon: 80.2707\n        }\n      },\n      'Mumbai': {\n        location: 'Mumbai',\n        condition: 'Partly Cloudy',\n        temperature: 28,\n        humidity: 70,\n        feelsLike: 32,\n        wind: 8,\n        icon: '‚õÖ',\n        country: 'India',\n        coordinates: {\n          lat: 19.0760,\n          lon: 72.8777\n        }\n      },\n      'Delhi': {\n        location: 'Delhi',\n        condition: 'Hazy',\n        temperature: 35,\n        humidity: 40,\n        feelsLike: 40,\n        wind: 3,\n        icon: 'üå´Ô∏è',\n        country: 'India',\n        coordinates: {\n          lat: 28.7041,\n          lon: 77.1025\n        }\n      },\n      'New York': {\n        location: 'New York',\n        condition: 'Cloudy',\n        temperature: 18,\n        humidity: 65,\n        feelsLike: 20,\n        wind: 12,\n        icon: '‚òÅÔ∏è',\n        country: 'USA',\n        coordinates: {\n          lat: 40.7128,\n          lon: -74.0060\n        }\n      },\n      'London': {\n        location: 'London',\n        condition: 'Rainy',\n        temperature: 15,\n        humidity: 80,\n        feelsLike: 13,\n        wind: 15,\n        icon: 'üåßÔ∏è',\n        country: 'UK',\n        coordinates: {\n          lat: 51.5074,\n          lon: -0.1278\n        }\n      }\n    };\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const weather = mockData[location] || {\n          location: location,\n          condition: 'Unknown',\n          temperature: 20,\n          humidity: 60,\n          feelsLike: 22,\n          wind: 7,\n          icon: '‚ùì',\n          country: 'Unknown',\n          coordinates: {\n            lat: 0,\n            lon: 0\n          }\n        };\n        resolve({\n          success: true,\n          data: weather\n        });\n      }, 1000); // Simulate API delay\n    });\n  }\n\n  // Mock AI recommendations\n  static getMockRecommendations(weatherData) {\n    const temp = weatherData.temperature;\n    const condition = weatherData.condition.toLowerCase();\n    let foodRecs, clothingRecs;\n\n    // Generate food recommendations based on temperature and weather\n    if (temp < 15) {\n      foodRecs = ['Hot Soup', 'Masala Chai', 'Hot Chocolate', 'Biryani'];\n    } else if (temp < 25) {\n      foodRecs = ['Fresh Juice', 'Salad', 'Fruit Bowl', 'Iced Tea'];\n    } else {\n      foodRecs = ['Ice Cream', 'Cold Drinks', 'Watermelon', 'Coconut Water'];\n    }\n\n    // Generate clothing recommendations\n    if (temp < 15) {\n      clothingRecs = ['Heavy Jacket', 'Sweater', 'Long Pants', 'Boots'];\n    } else if (temp < 25) {\n      clothingRecs = ['Light Jacket', 'T-Shirt', 'Jeans', 'Sneakers'];\n    } else {\n      clothingRecs = ['Shorts', 'Tank Top', 'Sandals', 'Hat'];\n    }\n\n    // Add weather-specific recommendations\n    if (condition.includes('rain')) {\n      clothingRecs.push('Umbrella', 'Raincoat');\n      foodRecs = ['Hot Coffee', 'Pakoras', 'Hot Tea', 'Soup'];\n    }\n    if (condition.includes('sun') || condition.includes('clear')) {\n      clothingRecs.push('Sunglasses', 'Sunscreen');\n    }\n    return new Promise(resolve => {\n      setTimeout(() => {\n        resolve({\n          success: true,\n          data: {\n            food: foodRecs.slice(0, 3),\n            clothing: clothingRecs.slice(0, 4),\n            generatedAt: new Date().toISOString()\n          }\n        });\n      }, 2000); // Simulate AI processing time\n    });\n  }\n}\nexport default WeatherAPI;","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","WeatherAPI","searchWeather","location","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","data","json","error","console","getMockWeatherData","getAIRecommendations","weatherData","weather","getMockRecommendations","mockData","condition","temperature","humidity","feelsLike","wind","icon","country","coordinates","lat","lon","Promise","resolve","setTimeout","success","temp","toLowerCase","foodRecs","clothingRecs","includes","push","food","slice","clothing","generatedAt","Date","toISOString"],"sources":["A:/brutal-weather/src/services/WeatherAPI.js"],"sourcesContent":["// Weather API service\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\nclass WeatherAPI {\r\n  // Search for weather data by location\r\n  static async searchWeather(location) {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/weather/search`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ location }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Weather API error:', error);\r\n      // Fallback to mock data for development\r\n      return this.getMockWeatherData(location);\r\n    }\r\n  }\r\n\r\n  // Get AI recommendations from backend\r\n  static async getAIRecommendations(weatherData, location) {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/ai/recommendations`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ \r\n          weather: weatherData,\r\n          location: location\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      console.error('AI API error:', error);\r\n      // Fallback to mock recommendations\r\n      return this.getMockRecommendations(weatherData);\r\n    }\r\n  }\r\n\r\n  // Mock weather data for development/fallback\r\n  static getMockWeatherData(location) {\r\n    const mockData = {\r\n      'Chennai': { \r\n        location: 'Chennai', \r\n        condition: 'Clear', \r\n        temperature: 22, \r\n        humidity: 50, \r\n        feelsLike: 24, \r\n        wind: 5, \r\n        icon: '‚òÄÔ∏è',\r\n        country: 'India',\r\n        coordinates: { lat: 13.0827, lon: 80.2707 }\r\n      },\r\n      'Mumbai': { \r\n        location: 'Mumbai', \r\n        condition: 'Partly Cloudy', \r\n        temperature: 28, \r\n        humidity: 70, \r\n        feelsLike: 32, \r\n        wind: 8, \r\n        icon: '‚õÖ',\r\n        country: 'India',\r\n        coordinates: { lat: 19.0760, lon: 72.8777 }\r\n      },\r\n      'Delhi': { \r\n        location: 'Delhi', \r\n        condition: 'Hazy', \r\n        temperature: 35, \r\n        humidity: 40, \r\n        feelsLike: 40, \r\n        wind: 3, \r\n        icon: 'üå´Ô∏è',\r\n        country: 'India',\r\n        coordinates: { lat: 28.7041, lon: 77.1025 }\r\n      },\r\n      'New York': {\r\n        location: 'New York',\r\n        condition: 'Cloudy',\r\n        temperature: 18,\r\n        humidity: 65,\r\n        feelsLike: 20,\r\n        wind: 12,\r\n        icon: '‚òÅÔ∏è',\r\n        country: 'USA',\r\n        coordinates: { lat: 40.7128, lon: -74.0060 }\r\n      },\r\n      'London': {\r\n        location: 'London',\r\n        condition: 'Rainy',\r\n        temperature: 15,\r\n        humidity: 80,\r\n        feelsLike: 13,\r\n        wind: 15,\r\n        icon: 'üåßÔ∏è',\r\n        country: 'UK',\r\n        coordinates: { lat: 51.5074, lon: -0.1278 }\r\n      }\r\n    };\r\n\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        const weather = mockData[location] || {\r\n          location: location,\r\n          condition: 'Unknown',\r\n          temperature: 20,\r\n          humidity: 60,\r\n          feelsLike: 22,\r\n          wind: 7,\r\n          icon: '‚ùì',\r\n          country: 'Unknown',\r\n          coordinates: { lat: 0, lon: 0 }\r\n        };\r\n        resolve({ success: true, data: weather });\r\n      }, 1000); // Simulate API delay\r\n    });\r\n  }\r\n\r\n  // Mock AI recommendations\r\n  static getMockRecommendations(weatherData) {\r\n    const temp = weatherData.temperature;\r\n    const condition = weatherData.condition.toLowerCase();\r\n    \r\n    let foodRecs, clothingRecs;\r\n    \r\n    // Generate food recommendations based on temperature and weather\r\n    if (temp < 15) {\r\n      foodRecs = ['Hot Soup', 'Masala Chai', 'Hot Chocolate', 'Biryani'];\r\n    } else if (temp < 25) {\r\n      foodRecs = ['Fresh Juice', 'Salad', 'Fruit Bowl', 'Iced Tea'];\r\n    } else {\r\n      foodRecs = ['Ice Cream', 'Cold Drinks', 'Watermelon', 'Coconut Water'];\r\n    }\r\n    \r\n    // Generate clothing recommendations\r\n    if (temp < 15) {\r\n      clothingRecs = ['Heavy Jacket', 'Sweater', 'Long Pants', 'Boots'];\r\n    } else if (temp < 25) {\r\n      clothingRecs = ['Light Jacket', 'T-Shirt', 'Jeans', 'Sneakers'];\r\n    } else {\r\n      clothingRecs = ['Shorts', 'Tank Top', 'Sandals', 'Hat'];\r\n    }\r\n    \r\n    // Add weather-specific recommendations\r\n    if (condition.includes('rain')) {\r\n      clothingRecs.push('Umbrella', 'Raincoat');\r\n      foodRecs = ['Hot Coffee', 'Pakoras', 'Hot Tea', 'Soup'];\r\n    }\r\n    if (condition.includes('sun') || condition.includes('clear')) {\r\n      clothingRecs.push('Sunglasses', 'Sunscreen');\r\n    }\r\n\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        resolve({\r\n          success: true,\r\n          data: {\r\n            food: foodRecs.slice(0, 3),\r\n            clothing: clothingRecs.slice(0, 4),\r\n            generatedAt: new Date().toISOString()\r\n          }\r\n        });\r\n      }, 2000); // Simulate AI processing time\r\n    });\r\n  }\r\n}\r\n\r\nexport default WeatherAPI;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}